import React, { createContext, useContext, useState, useEffect, useRef } from 'react';

const GameContext = createContext();

export const useGame = () => {
  const context = useContext(GameContext);
  if (!context) {
    throw new Error('useGame must be used within a GameProvider');
  }
  return context;
};

export const GameProvider = ({ children }) => {
  const [gameState, setGameState] = useState('waiting'); // waiting, instructions, sampleQuiz, preparation, mainQuiz, finished
  const [isHost, setIsHost] = useState(false);
  const [roomId, setRoomId] = useState(null);
  const [players, setPlayers] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [gameStartTime, setGameStartTime] = useState(null);
  const [questionStartTime, setQuestionStartTime] = useState(null);
  const [timeLeft, setTimeLeft] = useState(20);
  const [instructionsTimeLeft, setInstructionsTimeLeft] = useState(15);
  const [preparationTimeLeft, setPreparationTimeLeft] = useState(10);
  const [isMainQuiz, setIsMainQuiz] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [currentQuestionResult, setCurrentQuestionResult] = useState(null);
  const [allAnswers, setAllAnswers] = useState([]);
  const [serverTimeOffset, setServerTimeOffset] = useState(0); // ms: serverTime - localTime
  const [currentQuestionData, setCurrentQuestionData] = useState(null); // „Çµ„Éº„Éê„Éº„Åã„ÇâÂèó‰ø°„Åó„ÅüÂïèÈ°å„Éá„Éº„Çø

  const wsRef = useRef(null);
  const timerRef = useRef(null);

  const getServerNow = () => Date.now() + serverTimeOffset;

  // „Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢„Åô„ÇãÈñ¢Êï∞
  const clearTimer = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
      console.log('‚èπÔ∏è „Çø„Ç§„Éû„Éº„ÇØ„É™„Ç¢');
    }
  };

  // WebSocketÊé•Á∂ö„ÅÆÂàùÊúüÂåñ
  const connectToRoom = (roomCode, userName, asHost = false) => {
    // Áí∞Â¢ÉÂ§âÊï∞„Åæ„Åü„ÅØËá™ÂãïÊ§úÂá∫„ÅßWebSocket„Çµ„Éº„Éê„Éº„ÅÆURL„ÇíÊ±∫ÂÆö
    let wsHost, wsProtocol;

    if (process.env.EXPO_PUBLIC_WS_HOST) {
      // Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà
      wsHost = process.env.EXPO_PUBLIC_WS_HOST;
      wsProtocol = process.env.EXPO_PUBLIC_WS_PROTOCOL || 'ws';
    } else if (typeof window !== 'undefined' && window.location) {
      // „Éñ„É©„Ç¶„Ç∂Áí∞Â¢É: ÁèæÂú®„ÅÆ„Éõ„Çπ„Éà„Çí‰ΩøÁî®
      wsHost = window.location.hostname === 'localhost'
        ? 'localhost:3001'
        : window.location.host;
      wsProtocol = window.location.protocol === 'https' ? 'wss' : 'ws';
    } else {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´ÈñãÁô∫
      wsHost = 'localhost:3001';
      wsProtocol = 'ws';
    }

    const wsUrl = `${wsProtocol}://${wsHost}/room/${roomCode}`;
    console.log('WebSocketÊé•Á∂öÂÖà:', wsUrl);

    try {
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('WebSocketÊé•Á∂öÊàêÂäü', wsUrl);
        // Ê•ΩË¶≥ÁöÑ„Å´Ëá™ÂàÜ„Çí„Éó„É¨„Ç§„É§„Éº‰∏ÄË¶ß„Å´ËøΩÂä†„Åó„Å¶„Åä„ÅèÔºà„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆ playerJoined „Åß‰∏äÊõ∏„Åç„Åï„Çå„ÇãÔºâ
        const tempId = `local-${Date.now().toString(36)}`;
        setPlayers(prev => {
          // „Åô„Åß„Å´ÂêåÂêç„ÅÆ„Éó„É¨„Ç§„É§„Éº„Åå„ÅÑ„ÇãÂ†¥Âêà„ÅØËøΩÂä†„Åó„Å™„ÅÑ
          if (prev.find(p => p.name === userName)) return prev;
          return [...prev, {
            id: tempId,
            name: userName,
            isHost: asHost,
            isReady: false,
            score: 0
          }];
        });

        // time sync: „Çµ„Éº„Éê„ÉºÊôÇÂàª„ÇíÂèñÂæó„Åó„Å¶Â∑ÆÂàÜ„ÇíË®àÁÆó„Åô„Çã
        sendMessage({
          type: 'timeSync',
          clientTime: Date.now(),
          timestamp: Date.now()
        });

        // ÂèÇÂä†„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
        sendMessage({
          type: 'join',
          userName,
          isHost: asHost,
          timestamp: Date.now()
        });
      };

      wsRef.current.onmessage = (event) => {
        const message = JSON.parse(event.data);
        handleWebSocketMessage(message);
      };

      wsRef.current.onclose = () => {
        console.log('WebSocketÊé•Á∂öÁµÇ‰∫Ü');
      };

      wsRef.current.onerror = (error) => {
        console.error('WebSocket „Ç®„É©„Éº:', error);
      };

      setRoomId(roomCode);
      setIsHost(asHost);

    } catch (error) {
      console.error('WebSocketÊé•Á∂ö„Ç®„É©„Éº:', error);
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´ÂæÖÊ©üÂÆ§„Çí‰ΩúÊàê„Åó„Å¶Ëá™ÂàÜ„ÇíÂèÇÂä†ËÄÖ„Å®„Åó„Å¶ËøΩÂä†
      console.log('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´ÂæÖÊ©üÂÆ§„Çí‰ΩúÊàê„Åó„Åæ„Åô', roomCode, userName, asHost);
      const localPlayerId = Date.now().toString() + Math.random().toString(36).substring(2);
      setRoomId(roomCode);
      setIsHost(asHost);
      setPlayers([{
        id: localPlayerId,
        name: userName,
        isHost: asHost,
        isReady: false,
        score: 0
      }]);
      setGameState('waiting');
    }
  };

  // WebSocket„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂá¶ÁêÜ
  const handleWebSocketMessage = (message) => {
    console.log('Âèó‰ø°„É°„ÉÉ„Çª„Éº„Ç∏:', message);

    switch (message.type) {
      case 'timeSync':
        // „Çµ„Éº„Éê„ÉºÊôÇÂàª„Å®„ÅÆÂ∑Æ„ÇíË®àÁÆó„Åó„Å¶‰øùÊåÅ
        if (message.serverTime) {
          const offset = message.serverTime - Date.now();
          setServerTimeOffset(offset);
          console.log('timeSync Âèó‰ø°. serverTime:', message.serverTime, 'offset(ms):', offset);
        }
        break;

      case 'playerJoined':
        setPlayers(message.players);
        break;

      case 'gameStart':
        console.log('üéÆ „Ç≤„Éº„É†ÈñãÂßã„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø° - Ë™¨ÊòéÁîªÈù¢„Å∏ÈÅ∑Áßª');
        console.log('  startTime:', message.startTime);
        console.log('  ÁèæÂú®„ÅÆgameState:', gameState);
        setGameState('instructions');
        setGameStartTime(message.startTime);
        // instructionsTimeLeft „Çí„Çµ„Éº„Éê„Éº startTime Âü∫Ê∫ñ„ÅßÂêåÊúü„Åó„Å¶„Çπ„Çø„Éº„Éà
        setInstructionsTimeLeft(15);
        startInstructionsTimer(message.startTime);
        console.log('  Êñ∞„Åó„ÅÑgameState: instructions');
        break;

      case 'instructionsEnd':
        console.log('Ë™¨ÊòéÁµÇ‰∫Ü - „Çµ„É≥„Éó„É´„ÇØ„Ç§„Ç∫ÈñãÂßã');
        setGameState('sampleQuiz');
        setCurrentQuestion(0);
        setIsMainQuiz(false);
        setShowResults(false);
        setCurrentQuestionResult(null);
        // „Çµ„Éº„Éê„Éº„Åå questionStart „ÇíÈÄÅ„ÇãÂÆüË£Ö„Å´„Çà„Çä„ÄÅstart „ÅØ questionStart „ÅßÂèó„ÅëÂèñ„Çã
        break;

      case 'sampleQuizEnd':
        console.log('„Çµ„É≥„Éó„É´„ÇØ„Ç§„Ç∫ÁµÇ‰∫Ü - Êú¨Áï™Ê∫ñÂÇôÁîªÈù¢„Å∏');
        setGameState('preparation');
        setPreparationTimeLeft(10);
        startPreparationTimer(message.startTime);
        break;

      case 'preparationEnd':
        console.log('Êú¨Áï™Ê∫ñÂÇôÁµÇ‰∫Ü - Êú¨Áï™„ÇØ„Ç§„Ç∫ÈñãÂßã');
        setGameState('mainQuiz');
        setCurrentQuestion(0);
        setIsMainQuiz(true);
        setShowResults(false);
        setCurrentQuestionResult(null);
        // Êú¨Áï™ÊúÄÂàù„ÅÆÂïèÈ°å„ÅØ questionStart „ÅßÂèó„ÅëÂèñ„Çã
        break;

      case 'questionStart':
        console.log('Ê¨°„ÅÆÂïèÈ°åÈñãÂßã:', message.questionIndex, '„É°„Ç§„É≥„ÇØ„Ç§„Ç∫:', message.isMainQuiz);
        setCurrentQuestion(message.questionIndex);
        setQuestionStartTime(message.startTime);
        setIsMainQuiz(message.isMainQuiz);
        setShowResults(false);
        setCurrentQuestionResult(null);
        setCurrentQuestionData(message.questionData); // „Çµ„Éº„Éê„Éº„Åã„ÇâÂèó‰ø°„Åó„ÅüÂïèÈ°å„Éá„Éº„Çø„Çí‰øùÂ≠ò
        // duration „Çí„Çµ„Éº„Éê„ÉºÈÄÅ‰ø°„Å´Âêà„Çè„Åõ„ÇãÔºà„Çµ„É≥„Éó„É´10s / Êú¨Áï™20sÔºâ
        const duration = message.isMainQuiz ? 20 : 10;
        // „Çµ„Éº„Éê„Éº startTime „ÇíÂà©Áî®„Åó„Å¶ÊÆã„ÇäÊôÇÈñì„ÇíÂêåÊúü„Åó„Å¶ÈñãÂßã
        startQuestionTimer(message.startTime, duration);
        break;

      case 'questionEnd':
        console.log('ÂïèÈ°åÁµÇ‰∫Ü - ÁµêÊûúË°®Á§∫:', message.result);
        setShowResults(true);
        setCurrentQuestionResult(message.result);
        clearTimer();
        break;

      case 'gameEnd':
        console.log('„Ç≤„Éº„É†ÁµÇ‰∫Ü - „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±:', message.players);
        setGameState('finished');
        setPlayers(message.players); // „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞Ôºà„Çπ„Ç≥„Ç¢„Å®ÂõûÁ≠îÊôÇÈñì„ÇíÂê´„ÇÄÔºâ
        setAllAnswers(message.allAnswers);
        clearTimer();
        break;

      case 'playerReady':
        setPlayers(message.players);
        break;

      default:
        console.log('Êú™Áü•„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çø„Ç§„Éó:', message.type);
    }
  };

  // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
  const sendMessage = (message) => {
    console.log('üì§ sendMessageÂëº„Å≥Âá∫„Åó:', message.type, 'WebSocketÁä∂ÊÖã:', wsRef.current?.readyState);
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log('  ‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°:', message);
      wsRef.current.send(JSON.stringify(message));
    } else {
      console.error('  ‚ùå WebSocketÊú™Êé•Á∂ö - „É°„ÉÉ„Çª„Éº„Ç∏Á†¥Ê£Ñ:', message);
      console.error('  wsRef.current:', wsRef.current);
      console.error('  readyState:', wsRef.current?.readyState);
    }
  };

  // „Éó„É¨„Ç§„É§„Éº„ÅÆÊ∫ñÂÇôÂÆå‰∫ÜÁä∂ÊÖã„Çí„Çµ„Éº„Éê„Éº„Å´ÈÄÅ‰ø°„Åô„ÇãÈñ¢Êï∞
  // Ê≥®ÊÑè: „Åì„ÅÆÈñ¢Êï∞„ÅØ GameProvider „ÅÆ return „Çà„ÇäÂâç„Å´ÂÆöÁæ©„Åó„Å¶„Åä„ÅèÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô
  const setPlayerReady = (isReady = true) => {
    try {
      console.log('ÈÄÅ‰ø°: playerReady isReady=', isReady);
      sendMessage({
        type: 'playerReady',
        isReady,
        timestamp: Date.now()
      });
    } catch (err) {
      console.error('setPlayerReady „Ç®„É©„Éº:', err);
    }
  };

  // ÂõûÁ≠îÈÄÅ‰ø°Ôºà„Çµ„Éº„Éê„Éº„Å∏Ôºâ
  // answerIndex: ÈÅ∏ÊäûËÇ¢„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
  // answerTime: ÂõûÁ≠î„Å´„Åã„Åã„Å£„ÅüÊôÇÈñìÔºà„Éü„É™ÁßíÔºâ
  const submitAnswer = (answerIndex, answerTime = null) => {
    try {
      const time = answerTime !== null ? answerTime : (Date.now() - (questionStartTime || Date.now()));
      console.log('ÈÄÅ‰ø°: submitAnswer', { questionIndex: currentQuestion, answerIndex, answerTime: time });
      sendMessage({
        type: 'submitAnswer',
        questionIndex: currentQuestion,
        answerIndex,
        answerTime: time,
        timestamp: Date.now()
      });
    } catch (err) {
      console.error('submitAnswer „Ç®„É©„Éº:', err);
    }
  };

  // „Ç≤„Éº„É†ÈñãÂßãÔºà„Éõ„Çπ„Éà„ÅÆ„ÅøÔºâ
  const startGame = () => {
    console.log('üéÆ startGameÈñ¢Êï∞Âëº„Å≥Âá∫„Åó');
    console.log('  isHost:', isHost);
    console.log('  wsRef.current:', wsRef.current);
    console.log('  readyState:', wsRef.current?.readyState);

    if (!isHost) {
      console.log('  ‚ùå „Éõ„Çπ„Éà„Åß„ÅØ„Å™„ÅÑ„Åü„ÇÅÂÆüË°å„Çí„Çπ„Ç≠„ÉÉ„Éó');
      return;
    }

    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {
      console.error('  ‚ùå WebSocketÊú™Êé•Á∂ö');
      console.error('  wsRef.current:', wsRef.current);
      console.error('  readyState:', wsRef.current?.readyState);
      throw new Error('WebSocketÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }

    console.log('  ‚úÖ „Çµ„Éº„Éê„Éº„Å´„Ç≤„Éº„É†ÈñãÂßã„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°');
    try {
      sendMessage({
        type: 'startGame',
        timestamp: Date.now()
      });
      console.log('  ‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÂÆå‰∫Ü');
    } catch (error) {
      console.error('  ‚ùå „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
      throw error;
    }

    // „Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆgameStart„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂæÖ„Å§Ôºà„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÅØÊõ¥Êñ∞„Åó„Å™„ÅÑÔºâ
  };

  // Ë™¨Êòé„Çø„Ç§„Éû„ÉºÈñãÂßãÔºàstartTime „ÅØ„Çµ„Éº„Éê„ÉºÊôÇÂàªÔºâ
  const startInstructionsTimer = (startTime = null) => {
    clearTimer();
    const total = 15;
    if (startTime) {
      // „Çµ„Éº„Éê„ÉºÊôÇÂàªÂü∫Ê∫ñ„ÅßÊÆã„Çä„ÇíË®àÁÆó
      const elapsed = Math.floor((getServerNow() - startTime) / 1000);
      const remaining = Math.max(0, total - elapsed);
      setInstructionsTimeLeft(remaining);
      if (remaining === 0) return;
      timerRef.current = setInterval(() => {
        const rem = Math.max(0, total - Math.floor((getServerNow() - startTime) / 1000));
        setInstructionsTimeLeft(rem);
        if (rem <= 0) {
          clearTimer();
        }
      }, 1000);
      return;
    }

    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´„Çø„Ç§„Éû„Éº
    setInstructionsTimeLeft(total);
    timerRef.current = setInterval(() => {
      setInstructionsTimeLeft((prev) => {
        if (prev == 0) {
          clearTimer();
          if (isHost) {
            sendMessage({ type: 'instructionsEnd', timestamp: Date.now() });
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  // Êú¨Áï™Ê∫ñÂÇô„Çø„Ç§„Éû„ÉºÈñãÂßãÔºàstartTime optionalÔºâ
  const startPreparationTimer = (startTime = null) => {
    clearTimer();
    const total = 10;
    if (startTime) {
      const elapsed = Math.floor((getServerNow() - startTime) / 1000);
      const remaining = Math.max(0, total - elapsed);
      setPreparationTimeLeft(remaining);
      if (remaining === 0) return;
      timerRef.current = setInterval(() => {
        const rem = Math.max(0, total - Math.floor((getServerNow() - startTime) / 1000));
        setPreparationTimeLeft(rem);
        if (rem <= 0) {
          clearTimer();
        }
      }, 1000);
      return;
    }

    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´„Çø„Ç§„Éû„Éº
    setPreparationTimeLeft(total);
    timerRef.current = setInterval(() => {
      setPreparationTimeLeft((prev) => {
        if (prev == 0) {
          clearTimer();
          if (isHost) {
            sendMessage({ type: 'preparationEnd', timestamp: Date.now() });
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  // ÂïèÈ°å„Çø„Ç§„Éû„ÉºÈñãÂßãÔºàstartTime „ÅØ„Çµ„Éº„Éê„ÉºÊôÇÂàª„ÄÅduration ÁßíÔºâ
  const startQuestionTimer = (startTime = null, duration = null) => {
    clearTimer();
    const dur = duration != null ? duration : (isMainQuiz ? 20 : 10);
    if (startTime) {
      const elapsed = Math.floor((getServerNow() - startTime) / 1000);
      const remaining = Math.max(0, dur - elapsed);
      setTimeLeft(remaining);
      if (remaining === 0) return;
      timerRef.current = setInterval(() => {
        const rem = Math.max(0, dur - Math.floor((getServerNow() - startTime) / 1000));
        setTimeLeft(rem);
        if (rem <= 0) {
          clearTimer();
        }
      }, 1000);
      return;
    }

    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´„Çø„Ç§„Éû„Éº
    setTimeLeft(dur);
    timerRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev == 0) {
          clearTimer();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  // Ê¨°„ÅÆÂïèÈ°å„Å∏Ôºà„Éõ„Çπ„Éà„ÅÆ„ÅøÔºâ
  const nextQuestion = () => {
    if (!isHost) return;

    const nextIndex = currentQuestion + 1;

    if (!isMainQuiz) {
      // „Çµ„É≥„Éó„É´„ÇØ„Ç§„Ç∫‰∏≠
      if (nextIndex < 2) {
        sendMessage({
          type: 'nextQuestion',
          questionIndex: nextIndex,
          isMainQuiz: false,
          startTime: Date.now(),
          timestamp: Date.now()
        });
      } else {
        // „Çµ„É≥„Éó„É´„ÇØ„Ç§„Ç∫ÁµÇ‰∫Ü
        sendMessage({
          type: 'sampleQuizEnd',
          timestamp: Date.now()
        });
      }
    } else {
      // Êú¨Áï™„ÇØ„Ç§„Ç∫‰∏≠
      if (nextIndex < 5) {
        sendMessage({
          type: 'nextQuestion',
          questionIndex: nextIndex,
          isMainQuiz: true,
          startTime: Date.now(),
          timestamp: Date.now()
        });
      } else {
        // Êú¨Áï™„ÇØ„Ç§„Ç∫ÁµÇ‰∫Ü
        sendMessage({
          type: 'endGame',
          timestamp: Date.now()
        });
      }
    }
  };

  // „É´„Éº„É†ÈÄÄÂá∫
  const leaveRoom = () => {
    if (wsRef.current) {
      sendMessage({
        type: 'leave',
        timestamp: Date.now()
      });
      wsRef.current.close();
    }

    // Áä∂ÊÖã„É™„Çª„ÉÉ„Éà
    setGameState('waiting');
    setIsHost(false);
    setRoomId(null);
    setPlayers([]);
    setCurrentQuestion(0);
    setGameStartTime(null);
    setQuestionStartTime(null);
    setTimeLeft(20);
    setShowResults(false);
    setCurrentQuestionResult(null);
    setAllAnswers([]);
    clearTimer();
  };

  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      clearTimer();
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  return (
    <GameContext.Provider value={{
      gameState,
      isHost,
      roomId,
      players,
      currentQuestion,
      gameStartTime,
      questionStartTime,
      timeLeft,
      instructionsTimeLeft,
      preparationTimeLeft,
      isMainQuiz,
      showResults,
      currentQuestionResult,
      allAnswers,
      currentQuestionData,
      connectToRoom,
      startGame,
      setPlayerReady,
      submitAnswer,
      nextQuestion,
      leaveRoom,
      sendMessage
    }}>
      {children}
    </GameContext.Provider>
  );
};